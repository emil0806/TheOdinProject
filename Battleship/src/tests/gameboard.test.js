import createGameboard from "../modules/gameboard";

describe("create gameboard", () => {
  const gameboard = createGameboard();
  it("creates gameboard with grid size 10x10", () => {
    expect(gameboard.displayBoard()).toStrictEqual([
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
    ]);
  });

  it("place ship of length 4 horizontal", () => {
    gameboard.placeShip(4, { x: 2, y: 3 });
    expect(gameboard.displayBoard()).toStrictEqual([
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "O", "O", "O", "O", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
    ]);
  });

  it("place new ship with length 2 horizontal", () => {
    gameboard.placeShip(2, { x: 6, y: 7 });
    expect(gameboard.displayBoard()).toStrictEqual([
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "O", "O", "O", "O", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "O", "O", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
    ]);
  });

  it("vertical ship", () => {
    gameboard.placeShip(5, { x: 4, y: 2 }, true);
    expect(gameboard.displayBoard()).toStrictEqual([
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "O", "O", "O", "O", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "O", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "O", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "O", "~", "~", "~", "~", "O", "O", "~", "~"],
      ["~", "O", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "O", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
    ]);
  });

  it("receive attack and update gameboard", () => {
    gameboard.receiveAttack({ x: 6, y: 7 });
    expect(gameboard.displayBoard()).toStrictEqual([
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "O", "O", "O", "O", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "O", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "O", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "O", "~", "~", "~", "~", "X", "O", "~", "~"],
      ["~", "O", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "O", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
    ]);
  });

  it("check if correct hit function is called", () => {
    const nextShip = gameboard.placeShip(2, { x: 5, y: 4 }, true);
    expect(nextShip.isSunk()).toBe(false);
    gameboard.receiveAttack({ x: 5, y: 4 });
    gameboard.receiveAttack({ x: 6, y: 4 });
    expect(gameboard.displayBoard()).toStrictEqual([
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "O", "O", "O", "O", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "O", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "O", "~", "X", "~", "~", "~", "~", "~", "~"],
      ["~", "O", "~", "X", "~", "~", "X", "O", "~", "~"],
      ["~", "O", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "O", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
    ]);
    expect(nextShip.isSunk()).toBe(true);
  });

  it("check if all ships are sunk", () => {
    expect(gameboard.isAllShipsSunk()).toBe(false);
  });
});

describe("new gameboard", () => {
  const newGameboard = createGameboard();
  const ship = newGameboard.placeShip(2, { x: 1, y: 1 });
  it("place new ship", () => {
    expect(newGameboard.displayBoard()).toStrictEqual([
      ["O", "O", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
    ]);
  });
  it("attack and miss", () => {
    expect(newGameboard.receiveAttack({ x: 5, y: 5 })).toBe(false);
    expect(newGameboard.displayBoard()).toStrictEqual([
      ["O", "O", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "*", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
    ]);
  });
  it("attack ship, and destroy", () => {
    newGameboard.receiveAttack({ x: 1, y: 1 });
    expect(ship.isSunk()).toBe(false);
    expect(newGameboard.isAllShipsSunk()).toBe(false);
    newGameboard.receiveAttack({ x: 1, y: 2 });
    expect(ship.isSunk()).toBe(true);
    expect(newGameboard.isAllShipsSunk()).toBe(true);
  });

  it("place second ship, and destroy it", () => {
    newGameboard.placeShip(2, { x: 3, y: 3 }, true);
    newGameboard.receiveAttack({ x: 3, y: 3 });
    expect(newGameboard.isAllShipsSunk()).toBe(false);
    newGameboard.receiveAttack({ x: 4, y: 3 });
    expect(newGameboard.isAllShipsSunk()).toBe(true);
    expect(newGameboard.displayBoard()).toStrictEqual([
      ["X", "X", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "X", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "X", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "*", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
      ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
    ]);
  });
});
